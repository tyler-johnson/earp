// Generated by CoffeeScript 1.6.1
(function() {
  var Earp, EventEmitter, Handlebars, async, cbWrap, cleanExt, fs, path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  Handlebars = require('handlebars');

  async = require('async');

  fs = require('fs');

  path = require('path');

  cleanExt = function(ext) {
    if (!(_.isString(ext) && ext)) {
      return "";
    }
    if (ext.substr(0, 1) === ".") {
      ext = ext.substr(1);
    }
    return "." + ext;
  };

  cbWrap = function(callback) {
    var _this = this;
    return function(err) {
      if (_.isFunction(callback)) {
        return callback.apply(_this, arguments);
      } else if (err) {
        return _this.emit("error", err);
      }
    };
  };

  Earp = (function(_super) {

    __extends(Earp, _super);

    function Earp(folder, options) {
      var _this = this;
      this.options = _.defaults(options || {}, {
        layout: null,
        extensions: ['hbs', 'hbr', 'handlebars'],
        partials: [],
        cache: true
      });
      this.cache = [];
      this.locals = {};
      this.helpers = {};
      this.partials = {};
      _.each(this.options.partials, function(name) {
        return _this.registerPartial(name);
      });
      this.location = path.resolve(process.cwd(), folder);
      if (!fs.existsSync(this.location)) {
        throw new Error("" + this.location + " couldn\'t be found.");
      }
    }

    Earp.prototype.set = function(key, val) {
      if (_.isObject(key)) {
        return _.extend(this.locals, key);
      } else {
        return this.locals[key] = val;
      }
    };

    Earp.prototype.registerHelper = function(name, fnc) {
      return this.helpers[name] = fnc;
    };

    Earp.prototype.registerPartial = function(template, data) {
      if (!_.isObject(data)) {
        data = {};
      }
      return this.partials[template] = data;
    };

    Earp.prototype.middleware = function() {
      var _this = this;
      return function(req, res, next) {
        res.render = function(name, data, options) {
          if (!_.isObject(data)) {
            data = {};
          }
          _.extend(data, {
            $req: req
          });
          return _this.template(name, options, function(err, template) {
            var html;
            if (err) {
              return next(err);
            } else {
              try {
                html = template.compile(data);
              } catch (e) {
                return next(e);
              }
              return res.send(html);
            }
          });
        };
        return next();
      };
    };

    Earp.prototype.find = function(template, cb) {
      var file;
      file = path.resolve(this.location, template);
      cb = cbWrap.call(this, cb);
      return async.detectSeries(this.options.extensions, function(ext, callback) {
        return fs.exists(file + cleanExt(ext), callback);
      }, function(ext) {
        if (ext === void 0) {
          return cb(null, null);
        }
        file = file + cleanExt(ext);
        return fs.stat(file, function(err, stat) {
          if (err) {
            return cb(err);
          } else if (!stat.isFile()) {
            return cb(new Error("\"" + template + "\" is not a file."));
          } else {
            return cb(null, {
              stat: stat,
              file: file
            });
          }
        });
      });
    };

    Earp.prototype.retrieve = function(file, cb) {
      file = path.resolve(this.location, file);
      cb = cbWrap.call(this, cb);
      return fs.readFile(file, 'utf8', function(err, content) {
        var ctx;
        if (err) {
          return cb(err);
        }
        if (!content) {
          ctx = function() {
            return "";
          };
        } else {
          try {
            ctx = Handlebars.compile(content);
          } catch (e) {
            return cb(e);
          }
        }
        return cb(null, {
          compile: ctx,
          content: content
        });
      });
    };

    Earp.prototype.template = function(name, options, cb) {
      var _ref,
        _this = this;
      if (_.isFunction(options) && !cb) {
        _ref = [options, {}], cb = _ref[0], options = _ref[1];
      }
      options = _.extend({}, this.options, options || {});
      cb = cbWrap.call(this, cb);
      return this.find(name, function(err, template) {
        var cached;
        if (err) {
          return cb(err);
        } else if (!template) {
          return cb(new Error("Couldn't find template \"" + name + "\"."));
        }
        if (options.cache) {
          cached = _.findWhere(_this.cache, {
            file: template.file
          });
          if (cached && template.stat.atime <= cached.stat.atime) {
            return cb(null, cached);
          }
        }
        return _this.retrieve(template.file, function(err, extras) {
          var done, final, lopts;
          if (err) {
            return cb(err);
          }
          _.extend(template, extras);
          final = function(template) {
            if (options.cache) {
              _this.cache.push(template);
            }
            return cb(null, template);
          };
          done = function(template) {
            template.compile = _this.giveContext(template.compile, options.data);
            if (options.partials) {
              return _this.retrievePartials(options.partials, function(err, partials) {
                var compile;
                if (err) {
                  return cb(err);
                } else {
                  compile = template.compile;
                  template.compile = function(data, options) {
                    if (!_.isObject(options)) {
                      options = {};
                    }
                    options.partials = _.extend({}, partials, options.partials);
                    return compile(data, options);
                  };
                  return final(template);
                }
              });
            } else {
              return final(template);
            }
          };
          if (options.layout) {
            lopts = _.extend({}, options, {
              layout: null
            });
            return _this.template(options.layout, lopts, function(err, layout) {
              var compile;
              if (err) {
                return cb(err);
              }
              compile = template.compile;
              template.compile = function(data, options) {
                if (!data) {
                  data = {};
                }
                data.body = new Handlebars.SafeString(compile(data, options));
                return layout.compile(data, options);
              };
              return done(template);
            });
          } else {
            return done(template);
          }
        });
      });
    };

    Earp.prototype.retrievePartials = function(partials, cb) {
      var options, _ref,
        _this = this;
      if (_.isFunction(options) && !cb) {
        _ref = [options, {}], cb = _ref[0], options = _ref[1];
      }
      if (_.isArray(partials)) {
        partials = _.object(partials, []);
      }
      partials = _.pairs(_.extend({}, this.partials, partials));
      cb = cbWrap.call(this, cb);
      return async.map(partials, function(p, callback) {
        return _this.template(p[0], {
          layout: null,
          data: p[1],
          partials: false
        }, function(err, template) {
          if (err) {
            return callback(err);
          } else {
            return callback(null, [p[0], template.compile]);
          }
        });
      }, function(err, ps) {
        if (err) {
          return cb(err);
        } else {
          return cb(null, _.object(ps));
        }
      });
    };

    Earp.prototype.giveContext = function(compile, custom) {
      var _this = this;
      return function(data, options) {
        data = _.extend({}, _this.locals, custom, data);
        if (!_.isObject(options)) {
          options = {};
        }
        options.helpers = _.extend({}, Handlebars.helpers, _this.helpers, options.helpers);
        options.partials = _.extend({}, Handlebars.partials, options.partials);
        return compile(data, options);
      };
    };

    return Earp;

  })(EventEmitter);

  module.exports = Earp;

}).call(this);
